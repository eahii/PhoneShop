@page "/manage-account"
@inject HttpClient Http
@using Shared.Models
@using System.Net.Http.Json

<h3>Käyttäjätilien Hallinta</h3>

<table>
    <thead>
        <tr>
            <th>Email</th>
            <th>Rooli</th>
            <th>Etunimi</th>
            <th>Sukunimi</th>
            <th>Osoite</th>
            <th>Puhelinnumero</th>
            <th>Toiminnot</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.Email</td>
                <td>@user.Role</td>
                <td>@user.FirstName</td>
                <td>@user.LastName</td>
                <td>@user.Address</td>
                <td>@user.PhoneNumber</td>
                <td>
                    <button @onclick="() => EditUser(user)">Muokkaa</button>
                    <button @onclick="() => DeleteUser(user.UserID)">Poista</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (isEditing)
{
    <EditForm Model="editingUser" OnValidSubmit="UpdateUser">
        <div>
            <label>Email:</label>
            <InputText @bind-Value="editingUser.Email" />
        </div>
        <div>
            <label>Rooli:</label>
            <InputText @bind-Value="editingUser.Role" />
        </div>
        <div>
            <label>Etunimi:</label>
            <InputText @bind-Value="editingUser.FirstName" />
        </div>
        <div>
            <label>Sukunimi:</label>
            <InputText @bind-Value="editingUser.LastName" />
        </div>
        <div>
            <label>Osoite:</label>
            <InputText @bind-Value="editingUser.Address" />
        </div>
        <div>
            <label>Puhelinnumero:</label>
            <InputText @bind-Value="editingUser.PhoneNumber" />
        </div>
        <button type="submit">Päivitä</button>
        <button type="button" @onclick="CancelEdit">Peruuta</button>
    </EditForm>
}

@code {
    private List<UserModel> users = new();
    private UserModel editingUser = new();
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            users = await Http.GetFromJsonAsync<List<UserModel>>("/api/auth/users");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Virhe käyttäjien lataamisessa: {ex.Message}");
        }
    }

    private async Task DeleteUser(int userId)
    {
        try
        {
            var response = await Http.DeleteAsync($"/api/auth/users/{userId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
            }
            else
            {
                Console.WriteLine("Käyttäjän poistaminen epäonnistui.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Virhe käyttäjän poistamisessa: {ex.Message}");
        }
    }

    private void EditUser(UserModel user)
    {
        editingUser = user;
        isEditing = true;
    }

    private async Task UpdateUser()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api/auth/updateuser/{editingUser.UserID}", editingUser);
            if (response.IsSuccessStatusCode)
            {
                isEditing = false;
                await LoadUsers();
            }
            else
            {
                Console.WriteLine("Käyttäjän päivittäminen epäonnistui.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Virhe käyttäjän päivittämisessä: {ex.Message}");
        }
        finally
        {
            isEditing = false; // Hide the editing fields
        }
    }

    private void CancelEdit()
    {
        isEditing = false; // Hide the editing fields
    }
}