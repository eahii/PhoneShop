@page "/manage-account"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using Shared.Models
@using System.Net.Http.Json

<h3>Käyttäjätilien Hallinta</h3>

<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Email</th>
                <th>Rooli</th>
                <th>Etunimi</th>
                <th>Sukunimi</th>
                <th>Osoite</th>
                <th>Puhelinnumero</th>
                <th>Toiminnot</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Email</td>
                    <td>@user.Role</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Address</td>
                    <td>@user.PhoneNumber</td>
                    <td>
                        <button class="btn btn-primary btn-sm me-2" @onclick="() => EditUser(user)">
                            <span class="bi bi-pencil-fill"></span> Muokkaa
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(user.UserID)">
                            <span class="bi bi-trash-fill"></span> Poista
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Edit User Modal -->
@if (isEditing)
{
    <div class="modal show d-block" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Muokkaa Käyttäjää</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CancelEdit"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editingUser" OnValidSubmit="UpdateUser">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Email:</label>
                            <InputText class="form-control" @bind-Value="editingUser.Email" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Rooli:</label>
                            <InputText class="form-control" @bind-Value="editingUser.Role" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Etunimi:</label>
                            <InputText class="form-control" @bind-Value="editingUser.FirstName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Sukunimi:</label>
                            <InputText class="form-control" @bind-Value="editingUser.LastName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Osoite:</label>
                            <InputText class="form-control" @bind-Value="editingUser.Address" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Puhelinnumero:</label>
                            <InputText class="form-control" @bind-Value="editingUser.PhoneNumber" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Peruuta</button>
                            <button type="submit" class="btn btn-primary">Päivitä</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<UserModel> users = new();
    private UserModel editingUser = new();
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            users = await Http.GetFromJsonAsync<List<UserModel>>("/api/auth/users");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Virhe käyttäjien lataamisessa: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Virhe käyttäjien lataamisessa: {ex.Message}");
        }
    }

    private async Task DeleteUser(int userId)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Haluatko varmasti poistaa tämän käyttäjän?");
        if (!confirm)
            return;

        try
        {
            var response = await Http.DeleteAsync($"/api/auth/users/{userId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
                await JSRuntime.InvokeVoidAsync("alert", "Käyttäjä poistettu onnistuneesti.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Käyttäjän poistaminen epäonnistui.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Virhe käyttäjän poistamisessa: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Virhe käyttäjän poistamisessa: {ex.Message}");
        }
    }

    private void EditUser(UserModel user)
    {
        // Create a copy to avoid directly editing the list
        editingUser = new UserModel
            {
                UserID = user.UserID,
                Email = user.Email,
                Role = user.Role,
                FirstName = user.FirstName,
                LastName = user.LastName,
                Address = user.Address,
                PhoneNumber = user.PhoneNumber
            };
        isEditing = true;
    }

    private async Task UpdateUser()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api/auth/updateuser/{editingUser.UserID}", editingUser);
            if (response.IsSuccessStatusCode)
            {
                isEditing = false;
                await LoadUsers();
                await JSRuntime.InvokeVoidAsync("alert", "Käyttäjä päivitetty onnistuneesti.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Käyttäjän päivittäminen epäonnistui.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Virhe käyttäjän päivittämisessä: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Virhe käyttäjän päivittämisessä: {ex.Message}");
        }
        finally
        {
            isEditing = false; // Hide the editing fields
        }
    }

    private void CancelEdit()
    {
        isEditing = false; // Hide the editing fields
    }
}