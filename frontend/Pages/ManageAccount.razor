@page "/manage-account"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using Shared.Models

<h3>Manage Accounts</h3>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Rooli</th>
                <th>Etunimi</th>
                <th>Sukunimi</th>
                <th>Osoite</th>
                <th>Puhelinnumero</th>
                <th>Toiminnot</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Email</td>
                    <td>@user.Role</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Address</td>
                    <td>@user.PhoneNumber</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-2" @onclick="() => EditUser(user)">Muokkaa</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.UserID)">Poista</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (isEditing)
{
    <div class="modal">
        <div class="modal-content">
            <h4>Muokkaa Käyttäjää</h4>
            <EditForm Model="editingUser" OnValidSubmit="UpdateUser">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">Email:</label>
                    <InputText class="form-control" @bind-Value="editingUser.Email" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Rooli:</label>
                    <InputText class="form-control" @bind-Value="editingUser.Role" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Etunimi:</label>
                    <InputText class="form-control" @bind-Value="editingUser.FirstName" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Sukunimi:</label>
                    <InputText class="form-control" @bind-Value="editingUser.LastName" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Osoite:</label>
                    <InputText class="form-control" @bind-Value="editingUser.Address" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Puhelinnumero:</label>
                    <InputText class="form-control" @bind-Value="editingUser.PhoneNumber" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Salasana:</label>
                    <InputText class="form-control" @bind-Value="editingUser.Password" type="password"
                        placeholder="Uusi salasana (jätä tyhjäksi, jos ei muutosta)" />
                </div>
                <button type="submit" class="btn btn-success me-2">Päivitä</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Peruuta</button>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<UserModel>? users;
    private UserModel? editingUser;
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await Http.GetFromJsonAsync<List<UserModel>>("/api/auth/users");
    }

    private void EditUser(UserModel user)
    {
        // Create a copy to avoid directly editing the list
        editingUser = new UserModel
            {
                UserID = user.UserID,
                Email = user.Email,
                Role = user.Role,
                FirstName = user.FirstName,
                LastName = user.LastName,
                Address = user.Address,
                PhoneNumber = user.PhoneNumber
            };
        isEditing = true;
    }

    private async Task UpdateUser()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api/auth/updateuser/{editingUser.UserID}", editingUser);
            if (response.IsSuccessStatusCode)
            {
                isEditing = false;
                await LoadUsers();
                await JSRuntime.InvokeVoidAsync("alert", "Käyttäjä päivitetty onnistuneesti.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Käyttäjän päivittäminen epäonnistui.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Virhe: {ex.Message}");
        }
    }

    private async Task DeleteUser(int userId)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Haluatko varmasti poistaa tämän käyttäjän?");
            if (confirmed)
            {
                var response = await Http.DeleteAsync($"/api/auth/users/{userId}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadUsers();
                    await JSRuntime.InvokeVoidAsync("alert", "Käyttäjä poistettu onnistuneesti.");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Käyttäjän poistaminen epäonnistui.");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Virhe: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        editingUser = null;
    }
}